  
import com.datastax.driver.core.Cluster;  
import com.datastax.driver.core.Host;  
import com.datastax.driver.core.Metadata;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.ResultSetFuture;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.Statement;
import com.datastax.driver.core.querybuilder.Insert;
import com.datastax.driver.core.querybuilder.QueryBuilder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ExecutionException;  


public class CassandraConnector  
{  
   private Cluster cluster;    
   private Session session;  

   
   public void connect(final String node, final int port)  
   {  
      this.cluster = Cluster.builder().addContactPoint(node).withPort(port).build();  
      final Metadata metadata = cluster.getMetadata();  
      System.out.printf("Connected to cluster: %s\n", metadata.getClusterName());  
      for (final Host host : metadata.getAllHosts())  
      {  
         System.out.printf("Datacenter: %s; Host: %s; Rack: %s\n",  
            host.getDatacenter(), host.getAddress(), host.getRack());  
      }  
      session = cluster.connect();  
   }  
  
 
   public Session getSession()  
   {  
      return this.session;  
   }  
  
 
   public void close()  
   {  
	  dropSchema();
      cluster.close();  
      session.close();
   } 
   
   public void dropSchema() {
	   session.execute("DROP KEYSPACE \"news\"");
	    System.out.println("Finished dropping keyspace.");
   }
   
	

	 
	public void createTable() {

		    String createKS = "CREATE KEYSPACE IF NOT EXISTS news WITH REPLICATION = { 'class': 'SimpleStrategy', 'replication_factor': '2' }";
	        session.execute(createKS);
	        
	        String query = "create table IF NOT EXISTS news.rss (id uuid primary key,title text"
	        		+ ",url text,link text , date timestamp);";
	        session.execute(query);
	        
	        String dateIndex = "create index IF NOT EXISTS date ON news.rss (date);";
	        session.execute(dateIndex);
	        
	        String urlIndex = "create index IF NOT EXISTS url ON news.rss (url);";
	        session.execute(urlIndex);
	        System.out.println("Index created");
	        
		    System.out.println("Created new table");  
	}
	
	public void insertNews(News news)  {  	
		 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
         String formattedDate = formatter.format(news.getDate());
			 try
			    {  
		        Insert insert = QueryBuilder.insertInto("news", "rss")
		        							 .value("id", news.getId())
		                                    .value("title", news.getTitle())
		                                    .value("url", news.getUrl())
		                                    .value("link", news.getLink())
		                                    .value("date", formattedDate);
		        session.execute(insert.toString());
		        System.out.println("news.getTitle() " +news.getTitle() + "  " + "news.getUrl() "+news.getUrl() );   
			    }
			    catch (Exception ex)
			    {
			        ex.printStackTrace();
			    }
	}  
	
	
   
	
	public void selectUrl(String url, String d) throws ParseException  {  
		Statement selectQuery;
		if(d == null) {
			selectQuery =  QueryBuilder.select().all().from("news","rss")
					.where(QueryBuilder.eq("url",url));
		}
		else {
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			Date date = dateFormat.parse(d);
			
			selectQuery =  QueryBuilder.select().all().from("news","rss")
					.where(QueryBuilder.eq("date",date)).and(QueryBuilder.eq("url",url)).allowFiltering();
		}
		
		ResultSetFuture future = session.executeAsync(selectQuery);

		try {
			ResultSet rs = future.get();
			for(Row r:rs.all()){
			    System.out.println(r.toString());
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}	
	

	}
}  